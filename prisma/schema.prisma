generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model profile {
  id              String         @id @default(cuid())
  name            String
  email           String         @unique
  emailVerified   DateTime?
  image           String
  isAdmin         Boolean        @default(false)
  isPro           Boolean        @default(false)
  totalAmountPaid Float          @default(0)
  totalAmountUsed Float          @default(0)
  runtimeRecieved Float          @default(0)
  runTimeUsed     Float          @default(0)
  apiCallCount    Int            @default(0)
  requestRunning  Boolean        @default(false)
  transactions    transactions[]
}

model transactions {
  id                  String   @id @default(cuid())
  userId              String
  amount              Float
  razorpay_payment_id String
  status              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                profile  @relation(fields: [userId], references: [id])
}

model contactUs {
  id          String  @id @default(cuid())
  firstName   String
  lastName    String?
  company     String?
  email       String
  country     String?
  phoneNumber String?
  message     String
}
